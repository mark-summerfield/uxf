# TODO create test_visit.py: the visitor function should output
# everything visited to actual/vN.txt # (N=13 63 for t13.uxf t63.uxf)
# and then regression test against expected/vN.txt
#
# TODO py/t/test_errors.py: go through all the error codes again to ensure
# all that are testable have tests
# TODO review & improve README.md, py/README.md, and py/eg/README.md
# TODO code review & improvement
# TODO release py 1.0.0
# TODO py/uxfparser.py
# TODO UXF libraries:
#   - for .js use Dart or TypeScript or similar that can output JS?
#   - uxf.rs (including .tlm eg)
#   - uxf.cpp uxf.java uxf.rb ... ?
#   - if I do an ANSI C implementation I'd need an insertion-ordered
#     hashtable algorithm:
#     https://troydhanson.github.io/uthash/userguide.html

py/uxf.py
py/uxfconvert.py
py/uxflint.py
py/uxfparser.py
py/README.md
py/setup.py
py/pypi.sh
py/t/regression.py
py/t/test_table.py
py/t/test_sqlite.py
py/t/test_errors.py
py/t/test_lints.py
py/t/test_imports.py
py/t/test_merge.py
py/t/test_include.py
py/t/test_use_config.py
py/t/test_editabletuple.py
py/t/test_compare.py
py/t/test_tlm.py
py/t/eq.py
py/t/gen.py
py/t/benchmark.py
py/eg/README.md
py/eg/compare.py
py/eg/visit.py
py/eg/slides1.py
py/eg/slides2.py
py/eg/slides.sld
py/eg/merge.py
py/eg/include.py
py/eg/Config.py
py/eg/Tlm.py

README.md

misc/epd2uxf.py
misc/md2html.sh

uxf.vim

st.sh

# NOTE IDEAS:
# - Documentation:
#   . Complete manual with egs and use cases
#   . Uniform eXchange Format - a 7"x9" PDF book? (see paper notes)
# - Verification suite: create files (valid & invalid UXF etc) &
#   language/library-neutral scripts for validating a UXF processor's
#   conformance.
# - Experiment with using UXF format to store various kinds of data,
#   e.g., styled text (but see uxf2html notes), spreadsheet, graphics,
#   etc., & equivalents to other formats, e.g., geojson, etc.
# - Language: allow '.' in identifiers (excl. first char)?
# - Python: load(), loads(), etc., accept listclass=List, mapclass=Map,
#   tableclass=Table, & uses these rather than List, Map, and Table, so
#   the user can use their own subclasses
# NOTE Rejected Ideas
# - Replace yes and no bools with built-in fieldless tables, (Y) (N)
# - Union types.

# vim: syn=yaml
