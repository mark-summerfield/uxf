# TODO rs

rs/src/lib.rs # add docs at the end
rs/src/value.rs # TODO
rs/src/list.rs # TODO
rs/src/map.rs # TODO
rs/src/table.rs # TODO
rs/src/tclass.rs
rs/src/field.rs
rs/src/util.rs
rs/src/event.rs
rs/src/constants.rs
rs/src/parser.rs # TODO
rs/src/output.rs # TODO
rs/src/test_utils.rs
rs/tests/test_value.rs # TODO
rs/tests/test_list.rs # TODO
rs/tests/test_map.rs # TODO
rs/tests/test_table.rs # TODO
rs/tests/test_tclass.rs
rs/tests/test_field.rs
rs/Cargo.toml
rs/README.md
# TODO port tlm to use rust uxf
# IDEA: noncopy nonowned versions: UxfBuf ValueBuf ... FieldBuf

py/uxf.py
py/uxfconvert.py
py/uxflint.py
py/uxfcompare.py
py/README.md
py/setup.py
py/pypi.sh
py/t/regression.py
py/t/test_table.py
py/t/test_sqlite.py
py/t/test_errors.py
py/t/test_lints.py
py/t/test_imports.py
py/t/test_merge.py
py/t/test_include.py
py/t/test_use_config.py
py/t/test_editabletuple.py
py/t/test_compare.py
py/t/test_tlm.py
py/t/gen.py
py/t/benchmark.py
py/eg/README.md
py/eg/compare.py
py/eg/eq.py
py/eg/visit.py
py/eg/slides1.py
py/eg/slides2.py
py/eg/slides.sld
py/eg/merge.py
py/eg/include.py
py/eg/Config.py
py/eg/Config2.py
py/eg/Tlm.py

README.md

misc/epd2uxf.py
misc/md2html.sh
misc/stats.py

uxf.vim

st.sh

# NOTE IDEAS:
# - UXF libraries:
#   . for .js use Dart or TypeScript or similar that can output JS?
#   . uxf.cpp uxf.java uxf.rb ... ?
# - Documentation:
#   . Complete manual with egs and use cases
#	. Part I Preliminaries
#	. Part II Practicalities
#	    Scalars / Collections / Replacing CSV / Replacing INI /
#	    Replacing JSON / Replacing SQLite / Creating Custom UXF Formats
#	. Part III Technicalities
#	    Railroad Diagrams / BNF / Limits (e.g., date/time/numeric;
#	    str and bytes lengths; etc) / Lists / Maps / Tables /
#	    Implementations // Python // Rust? // JS? // ???
#   . Uniform eXchange Format - a 7"x9" PDF book? (see paper notes)
# - Verification suite: create files (valid & invalid UXF etc) &
#   language/library-neutral scripts for validating a UXF processor's
#   conformance.
# - Experiment with using UXF format to store various kinds of data,
#   e.g., spreadsheet, graphics, etc., & equivalents to other formats,
#   e.g., geojson, etc.
# - Language: allow '.' in identifiers (excl. first char)?
# - Python: load(), loads(), etc., accept listclass=List, mapclass=Map,
#   tableclass=Table, & uses these rather than List, Map, and Table, so
#   the user can use their own subclasses
# NOTE Rejected Ideas
# - Replace yes and no bools with built-in fieldless tables, (Y) (N)
# - Union types.
# - Money type (twelth type), e.g., MONEY ::= '$' REAL; use, say
#   =Money currency:str amount; or, =USD amount, or similar, (where
#   amount could be str or int or real)

# vim: syn=yaml
